@model IEnumerable<Movie>

@{
    ViewData["Title"] = "All Movies";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

<div class="admin-movie-container">
    <div class="header-bar">
        <h1>🎬 Movie Manager</h1>
        <div class="actions">
            @if (User.IsInRole(SD.SuperAdmin) || User.IsInRole(SD.Admin))
            {
                <a asp-action="Create" class="btn-create">➕ Add New Movie</a>
            }
            <input type="text" id="searchInput" placeholder="🔍 Search..." onkeyup="filterTable()" />
        </div>
    </div>

    <form id="bulkActionForm">
        <table class="styled-table" id="movieTable">
            <thead>
                <tr>
                    <th><input type="checkbox" onclick="toggleAll(this)" /></th>
                    <th onclick="sortTable(1)">Title</th>
                    <th>Description</th>
                    <th onclick="sortTable(3)">Duration</th>
                    <th>Trailer</th>
                    <th>Poster</th>
                    <th onclick="sortTable(6)">Release</th>
                    <th>Actors</th>
                    <th>Language</th>
                    <th>Traffic</th>
                    <th>Director</th>
                    <th>Genre</th>
                    <th>Hall</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model)
                {
                    <tr>
                        <td><input type="checkbox" name="selectedIds" value="@item.Id" /></td>
                        <td>@item.Title</td>
                        <td>@item.Description</td>
                        <td>@item.DurationMinutes min</td>
                        <td><a href="@item.TrailerUrl" target="_blank">🎞️ Watch</a></td>
                        <td><img src="@item.PosterUrl" class="poster-preview" /></td>
                        <td>@item.ReleaseDate.ToShortDateString()</td>
                        <td>
                            @if (item.Actors != null && item.Actors.Any())
                            {
                                <div class="actor-photos-grid">
                                    @foreach (var actor in item.Actors)
                                    {
                                        <img src="@Url.Content(actor.Actor.PhotoUrl)" alt="@actor.Actor.FullName" class="actor-photo" title="@actor.Actor.FullName" />
                                    }
                                </div>
                            }
                        </td>
                        <td>@item.Language</td>
                        <td>@item.Traffic</td>
                        <td>@item.Director?.FullName</td>
                        <td>@item.Genre?.Name</td>
                        <td>@item.CinemaHall?.Name</td>
                        @if (User.IsInRole(SD.SuperAdmin) || User.IsInRole(SD.Admin))
                        {
                            <td>
                                <a asp-action="Edit" asp-route-id="@item.Id" class="btn mb-2 btn-warning">✏️</a>
                                <a asp-action="Delete" asp-route-id="@item.Id" class="btn btn-danger btn-delete">🗑️</a>
                            </td>
                        }
                    </tr>
                }
            </tbody>
        </table>

        <div class="bulk-actions">
            <button type="button" onclick="deleteSelected()" class="btn-danger">🗑️ Delete Selected</button>
        </div>
    </form>

    <div class="pagination">
        <button onclick="prevPage()" class="page-link prev-button">« Prev</button>
        <span id="pageInfo" class="page-info">Page 1</span>
        <button onclick="nextPage()" class="page-link next-button">Next »</button>
    </div>

</div>

@section Scripts {
    <script>
         let currentPage = 1;
          const rowsPerPage = 5;

        function sortTable(n) {
            const table = document.getElementById("movieTable");
            let switching = true, dir = "asc", switchcount = 0;
            while (switching)

        {
            switching = false;
            const rows = table.rows;
            for (let i = 1; i < (rows.length - 1); i++)

        {
            let shouldSwitch = false;
            const x = rows[i].getElementsByTagName("TD")[n];
            const y = rows[i + 1].getElementsByTagName("TD")[n];
            if ((dir === "asc" && x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) ||
                                (dir === "desc" && x.innerHTML.toLowerCase() < y.innerHTML.toLowerCase()))

        {
            shouldSwitch = true;
            break;
        }

        }

        if (shouldSwitch) {
            rows [i].parentNode.insertBefore(rows[i + 1], rows[i]);
            switching = true;
            switchcount ++;
        }

        else if (switchcount === 0 && dir === "asc") {
            dir = "desc";
            switching = true;
        }

        }
        }

        function toggleAll(source) {
            const checkboxes = document.querySelectorAll("input[name='selectedIds']");
            checkboxes .forEach(cb => cb.checked = source.checked);
        }

        function deleteSelected() {
            const selected = [...document.querySelectorAll("input[name='selectedIds']:checked")].map(cb => cb.value);
            if (selected.length === 0) return alert("No movies selected.");
            if (confirm("Are you sure you want to delete selected movies?"))

        {
            console .log("Deleting:", selected);
        }

        }

                        function filterTable() {
            const input = document.getElementById("searchInput").value.toLowerCase();
            const rows = document.querySelectorAll("#movieTable tbody tr");

            rows.forEach(row => {
                const match = row.innerText.toLowerCase().includes(input);
                row.dataset.visible = match ? "true" : "false";
            });

            currentPage = 1;
            paginateTable();
        }

        function paginateTable() {
            const rows = Array.from(document.querySelectorAll("#movieTable tbody tr"));
            const visibleRows = rows.filter(row => row.dataset.visible !== "false");
            const totalPages = Math.ceil(visibleRows.length / rowsPerPage) || 1;

            rows.forEach(row => row.style.display = "none");

            const start = (currentPage - 1) * rowsPerPage;
            const end = start + rowsPerPage;

            for (let i = start; i < end && i < visibleRows.length; i++) {
                visibleRows[i].style.display = "";
                visibleRows[i].classList.add("fade-in");
                setTimeout(() => visibleRows[i].classList.remove("fade-in"), 300);
            }

            const pageInfo = document.getElementById("pageInfo");
            if (pageInfo) {
                pageInfo.innerText = `Page ${currentPage} of ${totalPages}`;
            }

            document.querySelector(".pagination .prev-button").disabled = currentPage === 1;
            document.querySelector(".pagination .next-button").disabled = currentPage === totalPages;
        }

        function nextPage() {
            const visibleRows = Array.from(document.querySelectorAll("#movieTable tbody tr"))
                                     .filter(row => row.dataset.visible !== "false");
            const totalPages = Math.ceil(visibleRows.length / rowsPerPage) || 1;

            if (currentPage < totalPages) {
                currentPage++;
                paginateTable();
            }
        }

        function prevPage() {
            if (currentPage > 1) {
                currentPage--;
                paginateTable();
            }
        }

        window.onload = () => {
            const rows = document.querySelectorAll("#movieTable tbody tr");
            rows.forEach(row => row.dataset.visible = "true");
            paginateTable();
        };
    </script>
}
<script>
    document.addEventListener("DOMContentLoaded", function () {
        const deleteButtons = document.querySelectorAll(".btn-delete");

        deleteButtons.forEach(button => {
            button.addEventListener("click", function (e) {
                e.preventDefault(); // Prevent the default link navigation

                const deleteUrl = this.getAttribute("href");

                Swal.fire({
                    title: 'Are you sure?',
                    text: "You won't be able to revert this!",
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#d33',
                    cancelButtonColor: '#3085d6',
                    confirmButtonText: 'Yes, delete it!'
                }).then((result) => {
                    if (result.isConfirmed) {
                        // Redirect to the delete URL
                        window.location.href = deleteUrl;
                    }
                });
            });
        });
    });
</script>

<style>
    body.dark-mode {
        background-color: #121212;
        color: #eee;
    }

    .fade-in {
        animation: fadeInUp 0.3s ease-in-out;
    }

    @@keyframes fadeInUp {
        from

    {
        opacity: 0;
        transform: translateY(10px);
    }

    to {
        opacity: 1;
        transform: translateY(0);
    }

    }


    .admin-movie-container {
        padding: 2rem;
        background: var(--bg, #fff);
        border-radius: 10px;
        box-shadow: 0 8px 24px rgba(0, 0, 0, 0.1);
    }

    .header-bar {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1rem;
    }

    .btn-create {
        background: #B30000;
        color: #fff;
        padding: 0.5rem 1rem;
        border-radius: 5px;
        text-decoration: none;
    }

    .styled-table {
        width: 100%;
        border-collapse: collapse;
    }

        .styled-table th, .styled-table td {
            padding: 0.75rem;
            border: 1px solid #ddd;
            text-align: center;
        }

        .styled-table th {
            background-color: #B30000;
            color: white;
            cursor: pointer;
        }

    .poster-preview {
        height: 60px;
        border-radius: 6px;
    }

    .actor-photos-grid {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: 6px;
        padding: 2px;
    }

    .actor-photo {
        width: 40px !important;
        height: 40px !important;
        border-radius: 50% !important;
        object-fit: cover !important;
        border: 1px solid #ccc !important;
        transition: transform 0.2s ease-in-out;
    }

        .actor-photo:hover {
            transform: scale(1.1);
            border-color: #b30000;
        }

    .btn-table {
        margin: 0 4px;
        color: #B30000;
        text-decoration: none;
    }

    .bulk-actions {
        margin-top: 1rem;
    }

    .btn-danger {
        background: #B30000;
        color: white;
        padding: 0.4rem 0.9rem;
        border-radius: 5px;
        border: none;
        cursor: pointer;
    }

    .pagination {
        margin-top: 1rem;
        display: flex;
        justify-content: center;
        gap: 1rem;
    }

    #searchInput {
        padding: 0.4rem;
        border-radius: 5px;
        border: 1px solid #ccc;
    }

    .page-info {
        padding: 0.5rem 1rem;
        font-weight: bold;
        color: #B30000;
        background-color: #fff0f0;
        border-radius: 6px;
        box-shadow: 0 0 5px rgba(179, 0, 0, 0.2);
        animation: fadeInUp 0.4s ease-in-out;
    }

    .page-info {
        padding: 0.5rem 1rem;
        font-weight: bold;
        color: #B30000;
        background-color: #fff0f0;
        border-radius: 6px;
        box-shadow: 0 0 5px rgba(179, 0, 0, 0.2);
        animation: fadeInUp 0.4s ease-in-out;
    }

    .pagination button.page-link {
        cursor: pointer;
        background-color: #eee;
        color: #333;
        border: none;
        border-radius: 6px;
        padding: 0.5rem 1rem;
        transition: background-color 0.3s, transform 0.2s;
    }

        .pagination button.page-link:hover:not(:disabled) {
            background-color: #B30000;
            color: white;
            transform: scale(1.05);
        }

        .pagination button.page-link:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }
</style>